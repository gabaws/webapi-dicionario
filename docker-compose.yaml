version: '3.8'

services:
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - app-network

  fastapi_app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: fastapi_app
    restart: always
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      - MONGO_URL=mongodb://root:example@mongodb:27017/
      - DB_NAME=dicionario_dados
    depends_on:
      mongodb:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - app-network
  
  db:
    image: postgres:17-bookworm
    container_name: postgres_db
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: microservicos
      POSTGRES_USER: postgres_docker
      POSTGRES_PASSWORD: postgres_docker
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_docker -d microservicos"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - app-network


volumes:
  mongodb_data:
  postgres_data:

networks:
  app-network: